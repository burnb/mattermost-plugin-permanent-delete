// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Fileinfos", testFileinfos)
	t.Run("Posts", testPosts)
	t.Run("Preferences", testPreferences)
	t.Run("Reactions", testReactions)
}

func TestDelete(t *testing.T) {
	t.Run("Fileinfos", testFileinfosDelete)
	t.Run("Posts", testPostsDelete)
	t.Run("Preferences", testPreferencesDelete)
	t.Run("Reactions", testReactionsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Fileinfos", testFileinfosQueryDeleteAll)
	t.Run("Posts", testPostsQueryDeleteAll)
	t.Run("Preferences", testPreferencesQueryDeleteAll)
	t.Run("Reactions", testReactionsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Fileinfos", testFileinfosSliceDeleteAll)
	t.Run("Posts", testPostsSliceDeleteAll)
	t.Run("Preferences", testPreferencesSliceDeleteAll)
	t.Run("Reactions", testReactionsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Fileinfos", testFileinfosExists)
	t.Run("Posts", testPostsExists)
	t.Run("Preferences", testPreferencesExists)
	t.Run("Reactions", testReactionsExists)
}

func TestFind(t *testing.T) {
	t.Run("Fileinfos", testFileinfosFind)
	t.Run("Posts", testPostsFind)
	t.Run("Preferences", testPreferencesFind)
	t.Run("Reactions", testReactionsFind)
}

func TestBind(t *testing.T) {
	t.Run("Fileinfos", testFileinfosBind)
	t.Run("Posts", testPostsBind)
	t.Run("Preferences", testPreferencesBind)
	t.Run("Reactions", testReactionsBind)
}

func TestOne(t *testing.T) {
	t.Run("Fileinfos", testFileinfosOne)
	t.Run("Posts", testPostsOne)
	t.Run("Preferences", testPreferencesOne)
	t.Run("Reactions", testReactionsOne)
}

func TestAll(t *testing.T) {
	t.Run("Fileinfos", testFileinfosAll)
	t.Run("Posts", testPostsAll)
	t.Run("Preferences", testPreferencesAll)
	t.Run("Reactions", testReactionsAll)
}

func TestCount(t *testing.T) {
	t.Run("Fileinfos", testFileinfosCount)
	t.Run("Posts", testPostsCount)
	t.Run("Preferences", testPreferencesCount)
	t.Run("Reactions", testReactionsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Fileinfos", testFileinfosHooks)
	t.Run("Posts", testPostsHooks)
	t.Run("Preferences", testPreferencesHooks)
	t.Run("Reactions", testReactionsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Fileinfos", testFileinfosInsert)
	t.Run("Fileinfos", testFileinfosInsertWhitelist)
	t.Run("Posts", testPostsInsert)
	t.Run("Posts", testPostsInsertWhitelist)
	t.Run("Preferences", testPreferencesInsert)
	t.Run("Preferences", testPreferencesInsertWhitelist)
	t.Run("Reactions", testReactionsInsert)
	t.Run("Reactions", testReactionsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Fileinfos", testFileinfosReload)
	t.Run("Posts", testPostsReload)
	t.Run("Preferences", testPreferencesReload)
	t.Run("Reactions", testReactionsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Fileinfos", testFileinfosReloadAll)
	t.Run("Posts", testPostsReloadAll)
	t.Run("Preferences", testPreferencesReloadAll)
	t.Run("Reactions", testReactionsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Fileinfos", testFileinfosSelect)
	t.Run("Posts", testPostsSelect)
	t.Run("Preferences", testPreferencesSelect)
	t.Run("Reactions", testReactionsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Fileinfos", testFileinfosUpdate)
	t.Run("Posts", testPostsUpdate)
	t.Run("Preferences", testPreferencesUpdate)
	t.Run("Reactions", testReactionsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Fileinfos", testFileinfosSliceUpdateAll)
	t.Run("Posts", testPostsSliceUpdateAll)
	t.Run("Preferences", testPreferencesSliceUpdateAll)
	t.Run("Reactions", testReactionsSliceUpdateAll)
}
