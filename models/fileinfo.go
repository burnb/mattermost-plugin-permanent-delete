// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Fileinfo is an object representing the database table.
type Fileinfo struct {
	ID              string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Creatorid       null.String `boil:"creatorid" json:"creatorid,omitempty" toml:"creatorid" yaml:"creatorid,omitempty"`
	Postid          null.String `boil:"postid" json:"postid,omitempty" toml:"postid" yaml:"postid,omitempty"`
	Createat        null.Int64  `boil:"createat" json:"createat,omitempty" toml:"createat" yaml:"createat,omitempty"`
	Updateat        null.Int64  `boil:"updateat" json:"updateat,omitempty" toml:"updateat" yaml:"updateat,omitempty"`
	Deleteat        null.Int64  `boil:"deleteat" json:"deleteat,omitempty" toml:"deleteat" yaml:"deleteat,omitempty"`
	Path            null.String `boil:"path" json:"path,omitempty" toml:"path" yaml:"path,omitempty"`
	Thumbnailpath   null.String `boil:"thumbnailpath" json:"thumbnailpath,omitempty" toml:"thumbnailpath" yaml:"thumbnailpath,omitempty"`
	Previewpath     null.String `boil:"previewpath" json:"previewpath,omitempty" toml:"previewpath" yaml:"previewpath,omitempty"`
	Name            null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Extension       null.String `boil:"extension" json:"extension,omitempty" toml:"extension" yaml:"extension,omitempty"`
	Size            null.Int64  `boil:"size" json:"size,omitempty" toml:"size" yaml:"size,omitempty"`
	Mimetype        null.String `boil:"mimetype" json:"mimetype,omitempty" toml:"mimetype" yaml:"mimetype,omitempty"`
	Width           null.Int    `boil:"width" json:"width,omitempty" toml:"width" yaml:"width,omitempty"`
	Height          null.Int    `boil:"height" json:"height,omitempty" toml:"height" yaml:"height,omitempty"`
	Haspreviewimage null.Bool   `boil:"haspreviewimage" json:"haspreviewimage,omitempty" toml:"haspreviewimage" yaml:"haspreviewimage,omitempty"`

	R *fileinfoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L fileinfoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FileinfoColumns = struct {
	ID              string
	Creatorid       string
	Postid          string
	Createat        string
	Updateat        string
	Deleteat        string
	Path            string
	Thumbnailpath   string
	Previewpath     string
	Name            string
	Extension       string
	Size            string
	Mimetype        string
	Width           string
	Height          string
	Haspreviewimage string
}{
	ID:              "id",
	Creatorid:       "creatorid",
	Postid:          "postid",
	Createat:        "createat",
	Updateat:        "updateat",
	Deleteat:        "deleteat",
	Path:            "path",
	Thumbnailpath:   "thumbnailpath",
	Previewpath:     "previewpath",
	Name:            "name",
	Extension:       "extension",
	Size:            "size",
	Mimetype:        "mimetype",
	Width:           "width",
	Height:          "height",
	Haspreviewimage: "haspreviewimage",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var FileinfoWhere = struct {
	ID              whereHelperstring
	Creatorid       whereHelpernull_String
	Postid          whereHelpernull_String
	Createat        whereHelpernull_Int64
	Updateat        whereHelpernull_Int64
	Deleteat        whereHelpernull_Int64
	Path            whereHelpernull_String
	Thumbnailpath   whereHelpernull_String
	Previewpath     whereHelpernull_String
	Name            whereHelpernull_String
	Extension       whereHelpernull_String
	Size            whereHelpernull_Int64
	Mimetype        whereHelpernull_String
	Width           whereHelpernull_Int
	Height          whereHelpernull_Int
	Haspreviewimage whereHelpernull_Bool
}{
	ID:              whereHelperstring{field: "\"fileinfo\".\"id\""},
	Creatorid:       whereHelpernull_String{field: "\"fileinfo\".\"creatorid\""},
	Postid:          whereHelpernull_String{field: "\"fileinfo\".\"postid\""},
	Createat:        whereHelpernull_Int64{field: "\"fileinfo\".\"createat\""},
	Updateat:        whereHelpernull_Int64{field: "\"fileinfo\".\"updateat\""},
	Deleteat:        whereHelpernull_Int64{field: "\"fileinfo\".\"deleteat\""},
	Path:            whereHelpernull_String{field: "\"fileinfo\".\"path\""},
	Thumbnailpath:   whereHelpernull_String{field: "\"fileinfo\".\"thumbnailpath\""},
	Previewpath:     whereHelpernull_String{field: "\"fileinfo\".\"previewpath\""},
	Name:            whereHelpernull_String{field: "\"fileinfo\".\"name\""},
	Extension:       whereHelpernull_String{field: "\"fileinfo\".\"extension\""},
	Size:            whereHelpernull_Int64{field: "\"fileinfo\".\"size\""},
	Mimetype:        whereHelpernull_String{field: "\"fileinfo\".\"mimetype\""},
	Width:           whereHelpernull_Int{field: "\"fileinfo\".\"width\""},
	Height:          whereHelpernull_Int{field: "\"fileinfo\".\"height\""},
	Haspreviewimage: whereHelpernull_Bool{field: "\"fileinfo\".\"haspreviewimage\""},
}

// FileinfoRels is where relationship names are stored.
var FileinfoRels = struct {
}{}

// fileinfoR is where relationships are stored.
type fileinfoR struct {
}

// NewStruct creates a new relationship struct
func (*fileinfoR) NewStruct() *fileinfoR {
	return &fileinfoR{}
}

// fileinfoL is where Load methods for each relationship are stored.
type fileinfoL struct{}

var (
	fileinfoAllColumns            = []string{"id", "creatorid", "postid", "createat", "updateat", "deleteat", "path", "thumbnailpath", "previewpath", "name", "extension", "size", "mimetype", "width", "height", "haspreviewimage"}
	fileinfoColumnsWithoutDefault = []string{"id", "creatorid", "postid", "createat", "updateat", "deleteat", "path", "thumbnailpath", "previewpath", "name", "extension", "size", "mimetype", "width", "height", "haspreviewimage"}
	fileinfoColumnsWithDefault    = []string{}
	fileinfoPrimaryKeyColumns     = []string{"id"}
)

type (
	// FileinfoSlice is an alias for a slice of pointers to Fileinfo.
	// This should generally be used opposed to []Fileinfo.
	FileinfoSlice []*Fileinfo
	// FileinfoHook is the signature for custom Fileinfo hook methods
	FileinfoHook func(context.Context, boil.ContextExecutor, *Fileinfo) error

	fileinfoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	fileinfoType                 = reflect.TypeOf(&Fileinfo{})
	fileinfoMapping              = queries.MakeStructMapping(fileinfoType)
	fileinfoPrimaryKeyMapping, _ = queries.BindMapping(fileinfoType, fileinfoMapping, fileinfoPrimaryKeyColumns)
	fileinfoInsertCacheMut       sync.RWMutex
	fileinfoInsertCache          = make(map[string]insertCache)
	fileinfoUpdateCacheMut       sync.RWMutex
	fileinfoUpdateCache          = make(map[string]updateCache)
	fileinfoUpsertCacheMut       sync.RWMutex
	fileinfoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var fileinfoBeforeInsertHooks []FileinfoHook
var fileinfoBeforeUpdateHooks []FileinfoHook
var fileinfoBeforeDeleteHooks []FileinfoHook
var fileinfoBeforeUpsertHooks []FileinfoHook

var fileinfoAfterInsertHooks []FileinfoHook
var fileinfoAfterSelectHooks []FileinfoHook
var fileinfoAfterUpdateHooks []FileinfoHook
var fileinfoAfterDeleteHooks []FileinfoHook
var fileinfoAfterUpsertHooks []FileinfoHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Fileinfo) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileinfoBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Fileinfo) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileinfoBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Fileinfo) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileinfoBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Fileinfo) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileinfoBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Fileinfo) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileinfoAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Fileinfo) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileinfoAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Fileinfo) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileinfoAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Fileinfo) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileinfoAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Fileinfo) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileinfoAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFileinfoHook registers your hook function for all future operations.
func AddFileinfoHook(hookPoint boil.HookPoint, fileinfoHook FileinfoHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		fileinfoBeforeInsertHooks = append(fileinfoBeforeInsertHooks, fileinfoHook)
	case boil.BeforeUpdateHook:
		fileinfoBeforeUpdateHooks = append(fileinfoBeforeUpdateHooks, fileinfoHook)
	case boil.BeforeDeleteHook:
		fileinfoBeforeDeleteHooks = append(fileinfoBeforeDeleteHooks, fileinfoHook)
	case boil.BeforeUpsertHook:
		fileinfoBeforeUpsertHooks = append(fileinfoBeforeUpsertHooks, fileinfoHook)
	case boil.AfterInsertHook:
		fileinfoAfterInsertHooks = append(fileinfoAfterInsertHooks, fileinfoHook)
	case boil.AfterSelectHook:
		fileinfoAfterSelectHooks = append(fileinfoAfterSelectHooks, fileinfoHook)
	case boil.AfterUpdateHook:
		fileinfoAfterUpdateHooks = append(fileinfoAfterUpdateHooks, fileinfoHook)
	case boil.AfterDeleteHook:
		fileinfoAfterDeleteHooks = append(fileinfoAfterDeleteHooks, fileinfoHook)
	case boil.AfterUpsertHook:
		fileinfoAfterUpsertHooks = append(fileinfoAfterUpsertHooks, fileinfoHook)
	}
}

// One returns a single fileinfo record from the query.
func (q fileinfoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Fileinfo, error) {
	o := &Fileinfo{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for fileinfo")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Fileinfo records from the query.
func (q fileinfoQuery) All(ctx context.Context, exec boil.ContextExecutor) (FileinfoSlice, error) {
	var o []*Fileinfo

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Fileinfo slice")
	}

	if len(fileinfoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Fileinfo records in the query.
func (q fileinfoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count fileinfo rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q fileinfoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if fileinfo exists")
	}

	return count > 0, nil
}

// Fileinfos retrieves all the records using an executor.
func Fileinfos(mods ...qm.QueryMod) fileinfoQuery {
	mods = append(mods, qm.From("\"fileinfo\""))
	return fileinfoQuery{NewQuery(mods...)}
}

// FindFileinfo retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFileinfo(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Fileinfo, error) {
	fileinfoObj := &Fileinfo{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"fileinfo\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, fileinfoObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from fileinfo")
	}

	return fileinfoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Fileinfo) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no fileinfo provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fileinfoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	fileinfoInsertCacheMut.RLock()
	cache, cached := fileinfoInsertCache[key]
	fileinfoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			fileinfoAllColumns,
			fileinfoColumnsWithDefault,
			fileinfoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(fileinfoType, fileinfoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(fileinfoType, fileinfoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"fileinfo\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"fileinfo\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into fileinfo")
	}

	if !cached {
		fileinfoInsertCacheMut.Lock()
		fileinfoInsertCache[key] = cache
		fileinfoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Fileinfo.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Fileinfo) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	fileinfoUpdateCacheMut.RLock()
	cache, cached := fileinfoUpdateCache[key]
	fileinfoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			fileinfoAllColumns,
			fileinfoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update fileinfo, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"fileinfo\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, fileinfoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(fileinfoType, fileinfoMapping, append(wl, fileinfoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update fileinfo row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for fileinfo")
	}

	if !cached {
		fileinfoUpdateCacheMut.Lock()
		fileinfoUpdateCache[key] = cache
		fileinfoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q fileinfoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for fileinfo")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for fileinfo")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FileinfoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fileinfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"fileinfo\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, fileinfoPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in fileinfo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all fileinfo")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Fileinfo) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no fileinfo provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fileinfoColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	fileinfoUpsertCacheMut.RLock()
	cache, cached := fileinfoUpsertCache[key]
	fileinfoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			fileinfoAllColumns,
			fileinfoColumnsWithDefault,
			fileinfoColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			fileinfoAllColumns,
			fileinfoPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert fileinfo, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(fileinfoPrimaryKeyColumns))
			copy(conflict, fileinfoPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"fileinfo\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(fileinfoType, fileinfoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(fileinfoType, fileinfoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert fileinfo")
	}

	if !cached {
		fileinfoUpsertCacheMut.Lock()
		fileinfoUpsertCache[key] = cache
		fileinfoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Fileinfo record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Fileinfo) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Fileinfo provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), fileinfoPrimaryKeyMapping)
	sql := "DELETE FROM \"fileinfo\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from fileinfo")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for fileinfo")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q fileinfoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no fileinfoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from fileinfo")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for fileinfo")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FileinfoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(fileinfoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fileinfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"fileinfo\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, fileinfoPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from fileinfo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for fileinfo")
	}

	if len(fileinfoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Fileinfo) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFileinfo(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FileinfoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FileinfoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fileinfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"fileinfo\".* FROM \"fileinfo\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, fileinfoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FileinfoSlice")
	}

	*o = slice

	return nil
}

// FileinfoExists checks if the Fileinfo row exists.
func FileinfoExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"fileinfo\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if fileinfo exists")
	}

	return exists, nil
}
