// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testReactions(t *testing.T) {
	t.Parallel()

	query := Reactions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testReactionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reaction{}
	if err = randomize.Struct(seed, o, reactionDBTypes, true, reactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Reactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testReactionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reaction{}
	if err = randomize.Struct(seed, o, reactionDBTypes, true, reactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Reactions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Reactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testReactionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reaction{}
	if err = randomize.Struct(seed, o, reactionDBTypes, true, reactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ReactionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Reactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testReactionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reaction{}
	if err = randomize.Struct(seed, o, reactionDBTypes, true, reactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ReactionExists(ctx, tx, o.Userid, o.Postid, o.Emojiname)
	if err != nil {
		t.Errorf("Unable to check if Reaction exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ReactionExists to return true, but got false.")
	}
}

func testReactionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reaction{}
	if err = randomize.Struct(seed, o, reactionDBTypes, true, reactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	reactionFound, err := FindReaction(ctx, tx, o.Userid, o.Postid, o.Emojiname)
	if err != nil {
		t.Error(err)
	}

	if reactionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testReactionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reaction{}
	if err = randomize.Struct(seed, o, reactionDBTypes, true, reactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Reactions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testReactionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reaction{}
	if err = randomize.Struct(seed, o, reactionDBTypes, true, reactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Reactions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testReactionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	reactionOne := &Reaction{}
	reactionTwo := &Reaction{}
	if err = randomize.Struct(seed, reactionOne, reactionDBTypes, false, reactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reaction struct: %s", err)
	}
	if err = randomize.Struct(seed, reactionTwo, reactionDBTypes, false, reactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = reactionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = reactionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Reactions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testReactionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	reactionOne := &Reaction{}
	reactionTwo := &Reaction{}
	if err = randomize.Struct(seed, reactionOne, reactionDBTypes, false, reactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reaction struct: %s", err)
	}
	if err = randomize.Struct(seed, reactionTwo, reactionDBTypes, false, reactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = reactionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = reactionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Reactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func reactionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Reaction) error {
	*o = Reaction{}
	return nil
}

func reactionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Reaction) error {
	*o = Reaction{}
	return nil
}

func reactionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Reaction) error {
	*o = Reaction{}
	return nil
}

func reactionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Reaction) error {
	*o = Reaction{}
	return nil
}

func reactionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Reaction) error {
	*o = Reaction{}
	return nil
}

func reactionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Reaction) error {
	*o = Reaction{}
	return nil
}

func reactionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Reaction) error {
	*o = Reaction{}
	return nil
}

func reactionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Reaction) error {
	*o = Reaction{}
	return nil
}

func reactionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Reaction) error {
	*o = Reaction{}
	return nil
}

func testReactionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Reaction{}
	o := &Reaction{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, reactionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Reaction object: %s", err)
	}

	AddReactionHook(boil.BeforeInsertHook, reactionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	reactionBeforeInsertHooks = []ReactionHook{}

	AddReactionHook(boil.AfterInsertHook, reactionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	reactionAfterInsertHooks = []ReactionHook{}

	AddReactionHook(boil.AfterSelectHook, reactionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	reactionAfterSelectHooks = []ReactionHook{}

	AddReactionHook(boil.BeforeUpdateHook, reactionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	reactionBeforeUpdateHooks = []ReactionHook{}

	AddReactionHook(boil.AfterUpdateHook, reactionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	reactionAfterUpdateHooks = []ReactionHook{}

	AddReactionHook(boil.BeforeDeleteHook, reactionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	reactionBeforeDeleteHooks = []ReactionHook{}

	AddReactionHook(boil.AfterDeleteHook, reactionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	reactionAfterDeleteHooks = []ReactionHook{}

	AddReactionHook(boil.BeforeUpsertHook, reactionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	reactionBeforeUpsertHooks = []ReactionHook{}

	AddReactionHook(boil.AfterUpsertHook, reactionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	reactionAfterUpsertHooks = []ReactionHook{}
}

func testReactionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reaction{}
	if err = randomize.Struct(seed, o, reactionDBTypes, true, reactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Reactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testReactionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reaction{}
	if err = randomize.Struct(seed, o, reactionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Reaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(reactionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Reactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testReactionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reaction{}
	if err = randomize.Struct(seed, o, reactionDBTypes, true, reactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testReactionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reaction{}
	if err = randomize.Struct(seed, o, reactionDBTypes, true, reactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ReactionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testReactionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reaction{}
	if err = randomize.Struct(seed, o, reactionDBTypes, true, reactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Reactions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	reactionDBTypes = map[string]string{`Userid`: `character varying`, `Postid`: `character varying`, `Emojiname`: `character varying`, `Createat`: `bigint`}
	_               = bytes.MinRead
)

func testReactionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(reactionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(reactionAllColumns) == len(reactionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Reaction{}
	if err = randomize.Struct(seed, o, reactionDBTypes, true, reactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Reactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, reactionDBTypes, true, reactionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Reaction struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testReactionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(reactionAllColumns) == len(reactionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Reaction{}
	if err = randomize.Struct(seed, o, reactionDBTypes, true, reactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Reactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, reactionDBTypes, true, reactionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Reaction struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(reactionAllColumns, reactionPrimaryKeyColumns) {
		fields = reactionAllColumns
	} else {
		fields = strmangle.SetComplement(
			reactionAllColumns,
			reactionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ReactionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testReactionsUpsert(t *testing.T) {
	t.Parallel()

	if len(reactionAllColumns) == len(reactionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Reaction{}
	if err = randomize.Struct(seed, &o, reactionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Reaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Reaction: %s", err)
	}

	count, err := Reactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, reactionDBTypes, false, reactionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Reaction struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Reaction: %s", err)
	}

	count, err = Reactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
